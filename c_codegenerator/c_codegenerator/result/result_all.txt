file start
2019. 12. 17. (í™”) 03:20:30 KST


 ========================= ./input/input1.c =========================
------------------------ code ------------------------
int a = 3;
int b = 5;

int main(){
 	printf("hello world");
	return 0;

}

 


start syntax analysis
	      INT   0, 36
	      SUP   0, main
	      RET   0, 0
main:
	      INT   0, 12
	      INT   0, 12
	      LDA   0, 20
	      POP   0, 4
	     ADDR   0, printf
	      CAL   0, 0
	      LDA   1, -4
	     LITI   0, 0
	      STO   0, 1
	      RET   0, 0
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  main	3
========  code ==========
   0:  INT	0,36
   1:  SUP	0,3
   2:  RET	0,0
   3:  INT	0,12
   4:  INT	0,12
   5:  LDA	0,20
   6:  POP	0,4
   7:  ADDR	0,-1
   8:  CAL	0,0
   9:  LDA	1,-4
  10:  LITI	0,0
  11:  STO	0,1
  12:  RET	0,0
  13:  RET	0,0
start execution
hello worldend execution


 ========================= ./input/input2.c =========================
------------------------ code ------------------------
struct person{
    int height;
    int id;
};

int main(int argc, char ** argv ){

    struct person obj;
    obj.height = 150;
    obj.id = 1;
}



start syntax analysis
	      INT   0, 20
	      SUP   0, main
	      RET   0, 0
main:
	      INT   0, 28
	      LDA   1, 20
	      LDA   1, 20
	      LDI   0, 2
	     LITI   0, 150
	      STX   0, 1
	      POP   0, 1
	      LDA   1, 20
	     LITI   0, 4
	   OFFSET   0, 0
	      LDA   1, 20
	      LDI   0, 2
	     LITI   0, 4
	   OFFSET   0, 0
	     LITI   0, 1
	      STX   0, 1
	      POP   0, 1
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  main	3
========  code ==========
   0:  INT	0,20
   1:  SUP	0,3
   2:  RET	0,0
   3:  INT	0,28
   4:  LDA	1,20
   5:  LDA	1,20
   6:  LDI	0,2
   7:  LITI	0,150
   8:  STX	0,1
   9:  POP	0,1
  10:  LDA	1,20
  11:  LITI	0,4
  12:  OFFSET	0,0
  13:  LDA	1,20
  14:  LDI	0,2
  15:  LITI	0,4
  16:  OFFSET	0,0
  17:  LITI	0,1
  18:  STX	0,1
  19:  POP	0,1
  20:  RET	0,0
start execution
end execution


 ========================= ./input/input3.c =========================
------------------------ code ------------------------
struct Point 
{ 
   int x, y; 
};  
  
int main() 
{ 
   // A valid initialization. member x gets value 0 and y 
   // gets value 1.  The order of declaration is followed. 
   struct Point p1 = {0, 1};  
}

start syntax analysis
	      INT   0, 20
	      SUP   0, main
	      RET   0, 0
main:
	      INT   0, 20
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  main	3
========  code ==========
   0:  INT	0,20
   1:  SUP	0,3
   2:  RET	0,0
   3:  INT	0,20
   4:  RET	0,0
start execution
end execution


 ========================= ./input/input4.c =========================
------------------------ code ------------------------
struct Point 
{ 
   int x, y; 
}; 
  
int main() 
{ 
   // Create an array of structures 
   struct Point arr; 
  
   // Access array members 
   arr.x = 10; 
   arr.y = 20; 
  
   return 0; 
} 

start syntax analysis
	      INT   0, 20
	      SUP   0, main
	      RET   0, 0
main:
	      INT   0, 20
	      LDA   1, 12
	      LDA   1, 12
	      LDI   0, 2
	     LITI   0, 10
	      STX   0, 1
	      POP   0, 1
	      LDA   1, 12
	     LITI   0, 4
	   OFFSET   0, 0
	      LDA   1, 12
	      LDI   0, 2
	     LITI   0, 4
	   OFFSET   0, 0
	     LITI   0, 20
	      STX   0, 1
	      POP   0, 1
	      LDA   1, -4
	     LITI   0, 0
	      STO   0, 1
	      RET   0, 0
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  main	3
========  code ==========
   0:  INT	0,20
   1:  SUP	0,3
   2:  RET	0,0
   3:  INT	0,20
   4:  LDA	1,12
   5:  LDA	1,12
   6:  LDI	0,2
   7:  LITI	0,10
   8:  STX	0,1
   9:  POP	0,1
  10:  LDA	1,12
  11:  LITI	0,4
  12:  OFFSET	0,0
  13:  LDA	1,12
  14:  LDI	0,2
  15:  LITI	0,4
  16:  OFFSET	0,0
  17:  LITI	0,20
  18:  STX	0,1
  19:  POP	0,1
  20:  LDA	1,-4
  21:  LITI	0,0
  22:  STO	0,1
  23:  RET	0,0
  24:  RET	0,0
start execution
end execution


 ========================= ./input/input5.c =========================
------------------------ code ------------------------
// function returning the max between two numbers 
int max(int num1, int num2) {

   // local variable declaration 
   int result;
 
   if (num1 > num2)
      result = num1;
   else
      result = num2;
 
   return result; 
}

start syntax analysis
	      INT   0, 12
	      SUP   0, main
	      RET   0, 0
max:
	      INT   0, 24
	      LOD   1, 12
	      LOD   1, 16
	     GTRI   0, 0
	      JPC   0, L1
	      LDA   1, 20
	      LOD   1, 12
	      STX   0, 1
	      POP   0, 1
	      JMP   0, L2
L1:
	      LDA   1, 20
	      LOD   1, 16
	      STX   0, 1
	      POP   0, 1
L2:
	      LDA   1, -4
	      LOD   1, 20
	      STO   0, 1
	      RET   0, 0
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  max	3
   5:  L1	13
   6:  L2	17
error: undefined identifier main


 ========================= ./input/input6.c =========================
------------------------ code ------------------------
int max(int num1, int num2);
 
int main () {

   // local variable definition 
   int a = 100;
   int b = 200;
   int ret;
 
   // calling a function to get max value 
   ret = max(a, b);
 
//   printf( "Max value is : %d\n", ret );
 
   return 0;
}

start syntax analysis
	      INT   0, 12
	      SUP   0, main
	      RET   0, 0
main:
	      INT   0, 24
	      LDA   1, 20
	      INT   0, 16
	      LOD   1, 12
	      LOD   1, 16
	      POP   0, 5
	     ADDR   0, max
	      CAL   0, 0
	      STX   0, 1
	      POP   0, 1
	      LDA   1, -4
	     LITI   0, 0
	      STO   0, 1
	      RET   0, 0
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  main	3
error: undefined identifier max


 ========================= ./input/input7.c =========================
------------------------ code ------------------------
int main() {
  int values[5];
  int i;
//  printf("Enter 5 integers: ");
  
// taking input and storing it in an array
  for(i = 0; i < 5; ++i) {
//     scanf("%d", &values[i]);
  }
//  printf("Displaying integers: ");
  // printing elements of an array
  for(i = 0; i < 5; ++i) {
//     printf("%d\n", values[i]);
  }
  return 0;
}

start syntax analysis
	      INT   0, 12
	      SUP   0, main
	      RET   0, 0
main:
	      INT   0, 36
	      LDA   1, 32
	     LITI   0, 0
	      STX   0, 1
	      POP   0, 1
L2:
	      LOD   1, 32
	     LITI   0, 5
	     LSSI   0, 0
	      JPC   0, L3
L1:
	      LDA   1, 32
	      LDX   0, 1
	     INCI   0, 0
	      STX   0, 1
	      POP   0, 1
	      JMP   0, L2
L3:
	      LDA   1, 32
	     LITI   0, 0
	      STX   0, 1
	      POP   0, 1
L5:
	      LOD   1, 32
	     LITI   0, 5
	     LSSI   0, 0
	      JPC   0, L6
L4:
	      LDA   1, 32
	      LDX   0, 1
	     INCI   0, 0
	      STX   0, 1
	      POP   0, 1
	      JMP   0, L5
L6:
	      LDA   1, -4
	     LITI   0, 0
	      STO   0, 1
	      RET   0, 0
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  main	3
   5:  L2	8
   6:  L1	12
   7:  L3	18
   8:  L5	22
   9:  L4	26
  10:  L6	32
========  code ==========
   0:  INT	0,12
   1:  SUP	0,3
   2:  RET	0,0
   3:  INT	0,36
   4:  LDA	1,32
   5:  LITI	0,0
   6:  STX	0,1
   7:  POP	0,1
   8:  LOD	1,32
   9:  LITI	0,5
  10:  LSSI	0,0
  11:  JPC	0,18
  12:  LDA	1,32
  13:  LDX	0,1
  14:  INCI	0,0
  15:  STX	0,1
  16:  POP	0,1
  17:  JMP	0,8
  18:  LDA	1,32
  19:  LITI	0,0
  20:  STX	0,1
  21:  POP	0,1
  22:  LOD	1,32
  23:  LITI	0,5
  24:  LSSI	0,0
  25:  JPC	0,32
  26:  LDA	1,32
  27:  LDX	0,1
  28:  INCI	0,0
  29:  STX	0,1
  30:  POP	0,1
  31:  JMP	0,22
  32:  LDA	1,-4
  33:  LITI	0,0
  34:  STO	0,1
  35:  RET	0,0
  36:  RET	0,0
start execution
end execution


 ========================= ./input/input8.c =========================
------------------------ code ------------------------
int main(int argc, char **argv){

	int a;
	int b;

	{ 
	int c ; 
	int d ;
	}


	{ 
	int a ; 
	int b;
	}
	
	{
	int c; 
	int d;
	}

}

start syntax analysis
	      INT   0, 12
	      SUP   0, main
	      RET   0, 0
main:
	      INT   0, 36
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  main	3
========  code ==========
   0:  INT	0,12
   1:  SUP	0,3
   2:  RET	0,0
   3:  INT	0,36
   4:  RET	0,0
start execution
end execution


 ========================= ./input/input9.c =========================
------------------------ code ------------------------
void fun(){
	int a = 3;
	
}

int main(){

	fun();

	return 0;
}

start syntax analysis
	      INT   0, 12
	      SUP   0, main
	      RET   0, 0
fun:
	      INT   0, 16
	      RET   0, 0
main:
	      INT   0, 12
	      INT   0, 12
	      POP   0, 3
	     ADDR   0, fun
	      CAL   0, 0
	      LDA   1, -4
	     LITI   0, 0
	      STO   0, 1
	      RET   0, 0
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  fun	3
   5:  main	5
========  code ==========
   0:  INT	0,12
   1:  SUP	0,5
   2:  RET	0,0
   3:  INT	0,16
   4:  RET	0,0
   5:  INT	0,12
   6:  INT	0,12
   7:  POP	0,3
   8:  ADDR	0,3
   9:  CAL	0,0
  10:  LDA	1,-4
  11:  LITI	0,0
  12:  STO	0,1
  13:  RET	0,0
  14:  RET	0,0
start execution
end execution


 ========================= ./input/input10.c =========================
------------------------ code ------------------------
enum {MON, TUE, WED, THU, FRI} date;

int main(int args, char ** argv){

	date = MON;
	
}

start syntax analysis
--- warning at line 5:incompatible types in assignment expression
	      INT   0, 16
	      SUP   0, main
	      RET   0, 0
main:
	      INT   0, 20
	      LDA   0, 12
	     LITI   0, 0
	      STX   0, 1
	      POP   0, 1
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  main	3
========  code ==========
   0:  INT	0,16
   1:  SUP	0,3
   2:  RET	0,0
   3:  INT	0,20
   4:  LDA	0,12
   5:  LITI	0,0
   6:  STX	0,1
   7:  POP	0,1
   8:  RET	0,0
start execution
end execution


 ========================= ./input/input11.c =========================
------------------------ code ------------------------
typedef mytype int

int main(){

	mytype a;
	int c;
	
	a = 3;
	c = a+2;
}

start syntax analysis
line 1: syntax error near int 
==================================================


syntax error at line 1: near 
========  code ==========


 ========================= ./input/input12.c =========================
------------------------ code ------------------------
union {int a; float b;} myvar;

int main(){

	myvar.a = 3;
	myvar.b = 3.5;	
}

start syntax analysis
	      INT   0, 20
	      SUP   0, main
	      RET   0, 0
main:
	      INT   0, 12
	      LDA   0, 12
	      LDA   0, 12
	      LDI   0, 1
	     LITI   0, 3
	      STX   0, 1
	      POP   0, 1
	      LDA   0, 12
	      LDA   0, 12
	      LDI   0, 1
	      LOD   0, 16
	      STX   0, 1
	      POP   0, 1
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  main	3
========  code ==========
   0:  INT	0,20
   1:  SUP	0,3
   2:  RET	0,0
   3:  INT	0,12
   4:  LDA	0,12
   5:  LDA	0,12
   6:  LDI	0,1
   7:  LITI	0,3
   8:  STX	0,1
   9:  POP	0,1
  10:  LDA	0,12
  11:  LDA	0,12
  12:  LDI	0,1
  13:  LOD	0,16
  14:  STX	0,1
  15:  POP	0,1
  16:  RET	0,0
start execution
end execution


 ========================= ./input/input13.c =========================
------------------------ code ------------------------
int main(int args, char ** argv){

	fun();
	
}

start syntax analysis
line 3: syntax error: undefined identifier fun near fun
==================================================


syntax error at line 1: near 
========  code ==========


 ========================= ./input/input14.c =========================
------------------------ code ------------------------
int fun();


int main(){

}


void fun();

start syntax analysis
line 9: syntax error: redeclaration of identifier fun near ;
==================================================


syntax error at line 1: near 
========  code ==========


 ========================= ./input/input15.c =========================
------------------------ code ------------------------
int main(){

	fun(3);

}

int fun(int b){
	
	fun(b);

}

start syntax analysis
line 3: syntax error: undefined identifier fun near fun
==================================================


syntax error at line 1: near 
========  code ==========


 ========================= ./input/input16.c =========================
------------------------ code ------------------------
fun(){



}



start syntax analysis
	      INT   0, 12
	      SUP   0, main
	      RET   0, 0
fun:
	      INT   0, 12
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  fun	3
error: undefined identifier main


 ========================= ./input/input17.c =========================
------------------------ code ------------------------
void a = 3;


start syntax analysis
	      INT   0, 12
	      SUP   0, main
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
error: undefined identifier main


 ========================= ./input/input18.c =========================
------------------------ code ------------------------
fun(){

	struct s{
		int a = 3;
	};
}

start syntax analysis
line 4: syntax error near = 
==================================================


syntax error at line 1: near 
========  code ==========


 ========================= ./input/input19.c =========================
------------------------ code ------------------------
fun(){

	struct s{
		int a;
	};
}

start syntax analysis
	      INT   0, 12
	      SUP   0, main
	      RET   0, 0
fun:
	      INT   0, 16
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  fun	3
error: undefined identifier main


 ========================= ./input/input20.c =========================
------------------------ code ------------------------
fun(){

	struct s myvar;

}

start syntax analysis
line 5: syntax error: incomplete forward reference for identifier s near }
==================================================


syntax error at line 1: near 
========  code ==========


 ========================= ./input/input21.c =========================
------------------------ code ------------------------
fun(){
	gun();

}


gun(){

	fun();

}

start syntax analysis
line 2: syntax error: undefined identifier gun near gun
==================================================


syntax error at line 1: near 
========  code ==========


 ========================= ./input/input22.c =========================
------------------------ code ------------------------
struct s myvar;

fun(){

	struct s{ int a;};	

}


start syntax analysis
line 9: syntax error: incomplete forward reference for identifier s at end
==================================================


syntax error at line 1: near 
========  code ==========


 ========================= ./input/input23.c =========================
------------------------ code ------------------------
fun(struct s{int id;} a, struct s b){
	struct s c;
}

start syntax analysis
	      INT   0, 12
	      SUP   0, main
	      RET   0, 0
fun:
	      INT   0, 24
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  fun	3
error: undefined identifier main


 ========================= ./input/input24.c =========================
------------------------ code ------------------------
fun(struct s{int a;} a, struct s b){

}

start syntax analysis
	      INT   0, 12
	      SUP   0, main
	      RET   0, 0
fun:
	      INT   0, 20
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  fun	3
error: undefined identifier main


 ========================= ./input/input25.c =========================
------------------------ code ------------------------
int main()
{
	int* a;
	float* b;
	int c[10];


}

start syntax analysis
	      INT   0, 12
	      SUP   0, main
	      RET   0, 0
main:
	      INT   0, 60
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  main	3
========  code ==========
   0:  INT	0,12
   1:  SUP	0,3
   2:  RET	0,0
   3:  INT	0,60
   4:  RET	0,0
start execution
end execution


 ========================= ./input/input26.c =========================
------------------------ code ------------------------
int multiply(int a, int b) {
    int result;
    result=0;
    while (a) {
        if (a%2)
            result=result+b;
        a=a/2;
        b=b*2;
    }
    return result;
}
void main() {
    int i;
    i=multiply(120,3);
    printf("result=%d\n",i);
}

start syntax analysis
	      INT   0, 28
	      SUP   0, main
	      RET   0, 0
multiply:
	      INT   0, 24
	      LDA   1, 20
	     LITI   0, 0
	      STX   0, 1
	      POP   0, 1
L2:
	      LOD   1, 12
	      JPC   0, L3
	      LOD   1, 12
	     LITI   0, 2
	      MOD   0, 0
	      JPC   0, L4
	      LDA   1, 20
	      LOD   1, 20
	      LOD   1, 16
	     ADDI   0, 0
	      STX   0, 1
	      POP   0, 1
L4:
	      LDA   1, 12
	      LOD   1, 12
	     LITI   0, 2
	     DIVI   0, 0
	      STX   0, 1
	      POP   0, 1
	      LDA   1, 16
	      LOD   1, 16
	     LITI   0, 2
	     MULI   0, 0
	      STX   0, 1
	      POP   0, 1
L1:
	      JMP   0, L2
L3:
	      LDA   1, -4
	      LOD   1, 20
	      STO   0, 1
	      RET   0, 0
	      RET   0, 0
main:
	      INT   0, 16
	      LDA   1, 12
	      INT   0, 16
	     LITI   0, 120
	     LITI   0, 3
	      POP   0, 5
	     ADDR   0, multiply
	      CAL   0, 0
	      STX   0, 1
	      POP   0, 1
	      INT   0, 12
	      LDA   0, 12
	      LOD   1, 12
	      POP   0, 5
	     ADDR   0, printf
	      CAL   0, 0
	      RET   0, 0
==================================================


======== symbol =========
   1:  printf	-1
   2:  malloc	-2
   3:  scanf	-3
   4:  multiply	3
   5:  L2	8
   6:  L4	20
   7:  L1	32
   8:  L3	33
   9:  main	38
========  code ==========
   0:  INT	0,28
   1:  SUP	0,38
   2:  RET	0,0
   3:  INT	0,24
   4:  LDA	1,20
   5:  LITI	0,0
   6:  STX	0,1
   7:  POP	0,1
   8:  LOD	1,12
   9:  JPC	0,33
  10:  LOD	1,12
  11:  LITI	0,2
  12:  MOD	0,0
  13:  JPC	0,20
  14:  LDA	1,20
  15:  LOD	1,20
  16:  LOD	1,16
  17:  ADDI	0,0
  18:  STX	0,1
  19:  POP	0,1
  20:  LDA	1,12
  21:  LOD	1,12
  22:  LITI	0,2
  23:  DIVI	0,0
  24:  STX	0,1
  25:  POP	0,1
  26:  LDA	1,16
  27:  LOD	1,16
  28:  LITI	0,2
  29:  MULI	0,0
  30:  STX	0,1
  31:  POP	0,1
  32:  JMP	0,8
  33:  LDA	1,-4
  34:  LOD	1,20
  35:  STO	0,1
  36:  RET	0,0
  37:  RET	0,0
  38:  INT	0,16
  39:  LDA	1,12
  40:  INT	0,16
  41:  LITI	0,120
  42:  LITI	0,3
  43:  POP	0,5
  44:  ADDR	0,3
  45:  CAL	0,0
  46:  STX	0,1
  47:  POP	0,1
  48:  INT	0,12
  49:  LDA	0,12
  50:  LOD	1,12
  51:  POP	0,5
  52:  ADDR	0,-1
  53:  CAL	0,0
  54:  RET	0,0
start execution
result=360
end execution
